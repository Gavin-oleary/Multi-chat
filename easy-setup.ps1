# ========================================
# Multi-Model Chat - Easy Setup Wizard
# ========================================
# This script automatically sets up the Multi-Model Chat application using Docker

param(
    [switch]$SkipBrowser
)

$ErrorActionPreference = "Stop"

# Colors for output
function Write-Header { param($text) Write-Host "`n$text" -ForegroundColor Cyan }
function Write-Success { param($text) Write-Host "  ‚úì $text" -ForegroundColor Green }
function Write-Info { param($text) Write-Host "  ‚Ñπ $text" -ForegroundColor Yellow }
function Write-Error { param($text) Write-Host "  ‚úó $text" -ForegroundColor Red }

Clear-Host
Write-Host "================================================" -ForegroundColor Cyan
Write-Host "  Multi-Model Chat - Easy Setup Wizard" -ForegroundColor Cyan
Write-Host "================================================" -ForegroundColor Cyan
Write-Host ""

# ========================================
# Step 1: Check Docker
# ========================================
Write-Header "[1/6] Checking Docker Desktop..."

$dockerInstalled = Get-Command docker -ErrorAction SilentlyContinue
if (-not $dockerInstalled) {
    Write-Error "Docker Desktop not found"
    Write-Host ""
    Write-Host "  Docker Desktop is required to run this application." -ForegroundColor Yellow
    Write-Host "  Please install it from: https://www.docker.com/products/docker-desktop/" -ForegroundColor Cyan
    Write-Host ""
    $open = Read-Host "  Open download page? (Y/n)"
    if ($open -ne "n") {
        Start-Process "https://www.docker.com/products/docker-desktop/"
    }
    Write-Host ""
    Write-Host "  After installing Docker Desktop, please run this script again." -ForegroundColor Yellow
    exit 1
}
Write-Success "Docker found: $(docker --version)"

# ========================================
# Step 2: Check Docker is running
# ========================================
Write-Header "[2/6] Checking Docker service..."

try {
    docker ps | Out-Null
    Write-Success "Docker is running"
} catch {
    Write-Error "Docker is not running"
    Write-Host ""
    Write-Host "  Please start Docker Desktop and try again." -ForegroundColor Yellow
    Write-Host "  Look for the Docker whale icon in your system tray." -ForegroundColor Gray
    exit 1
}

# ========================================
# Step 3: Configure API Keys
# ========================================
Write-Header "[3/6] Setting up API keys..."

if (Test-Path ".env") {
    Write-Info "Found existing .env file"
    $overwrite = Read-Host "  Do you want to keep your existing configuration? (Y/n)"
    if ($overwrite -eq "n") {
        Remove-Item ".env"
        Write-Info "Removed existing .env file"
    } else {
        Write-Success "Using existing .env file"
        $skipConfig = $true
    }
}

if (-not (Test-Path ".env")) {
    Write-Host ""
    Write-Host "  You need API keys from 5 AI providers to use all features." -ForegroundColor Cyan
    Write-Host "  Don't worry - all these providers offer FREE API keys!" -ForegroundColor Green
    Write-Host ""
    Write-Host "  Get your FREE API keys from:" -ForegroundColor Cyan
    Write-Host "    1. OpenAI (ChatGPT)   ‚Üí " -NoNewline; Write-Host "https://platform.openai.com/api-keys" -ForegroundColor White
    Write-Host "    2. Anthropic (Claude) ‚Üí " -NoNewline; Write-Host "https://console.anthropic.com/" -ForegroundColor White
    Write-Host "    3. Google (Gemini)    ‚Üí " -NoNewline; Write-Host "https://makersuite.google.com/app/apikey" -ForegroundColor White
    Write-Host "    4. X.AI (Grok)        ‚Üí " -NoNewline; Write-Host "https://x.ai/api" -ForegroundColor White
    Write-Host "    5. Perplexity         ‚Üí " -NoNewline; Write-Host "https://www.perplexity.ai/settings/api" -ForegroundColor White
    Write-Host ""
    Write-Host "  Tip: Press Enter to skip a key. You can add it later by editing .env" -ForegroundColor Gray
    Write-Host ""
    
    $OPENAI_KEY = Read-Host "  Enter OpenAI API Key"
    $ANTHROPIC_KEY = Read-Host "  Enter Anthropic API Key"
    $GOOGLE_KEY = Read-Host "  Enter Google API Key"
    $GROK_KEY = Read-Host "  Enter Grok API Key (optional)"
    $PERPLEXITY_KEY = Read-Host "  Enter Perplexity API Key (optional)"
    
    # Validate at least one key is provided
    if (-not $OPENAI_KEY -and -not $ANTHROPIC_KEY -and -not $GOOGLE_KEY) {
        Write-Error "At least one API key (OpenAI, Anthropic, or Google) is required"
        Write-Host ""
        Write-Host "  Please get at least one API key and run this script again." -ForegroundColor Yellow
        exit 1
    }
    
    # Generate secure random password for database
    $DB_PASSWORD = -join ((65..90) + (97..122) + (48..57) | Get-Random -Count 20 | ForEach-Object {[char]$_})
    
    # Create .env file
    $envContent = @"
# ========================================
# Multi-Model Chat - Configuration
# ========================================
# Generated by easy-setup.ps1

# PostgreSQL Configuration
POSTGRES_USER=postgres
POSTGRES_PASSWORD=$DB_PASSWORD
POSTGRES_DB=multichat
POSTGRES_PORT=5432

# Redis Configuration
REDIS_PORT=6379

# API Keys
OPENAI_API_KEY=$OPENAI_KEY
ANTHROPIC_API_KEY=$ANTHROPIC_KEY
GOOGLE_API_KEY=$GOOGLE_KEY
GROK_API_KEY=$GROK_KEY
PERPLEXITY_API_KEY=$PERPLEXITY_KEY

# Application Ports
BACKEND_PORT=8000
FRONTEND_PORT=5173

# Frontend Environment
VITE_API_BASE_URL=http://localhost:8000
VITE_WS_BASE_URL=ws://localhost:8000

# Application Settings
DEBUG=false
CORS_ORIGINS=["http://localhost:5173"]
"@
    
    Set-Content -Path ".env" -Value $envContent -NoNewline
    Write-Success "Configuration saved to .env"
}

# ========================================
# Step 4: Pull Docker images
# ========================================
Write-Header "[4/6] Downloading required components..."
Write-Info "This may take a few minutes on first run..."

try {
    docker-compose pull 2>&1 | Out-Null
    Write-Success "Components downloaded"
} catch {
    Write-Error "Failed to download components"
    Write-Host "  Error: $_" -ForegroundColor Red
    exit 1
}

# ========================================
# Step 5: Start services
# ========================================
Write-Header "[5/6] Starting Multi-Model Chat..."

try {
    docker-compose up -d 2>&1 | Out-Null
    Write-Success "Services started"
} catch {
    Write-Error "Failed to start services"
    Write-Host "  Error: $_" -ForegroundColor Red
    Write-Host ""
    Write-Host "  Try running: docker-compose up" -ForegroundColor Yellow
    exit 1
}

# ========================================
# Step 6: Wait for services to be ready
# ========================================
Write-Header "[6/6] Waiting for services to initialize..."

$maxAttempts = 60
$attempt = 0
$healthy = $false

Write-Host "  Checking health" -NoNewline

while ($attempt -lt $maxAttempts -and -not $healthy) {
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8000/health" -UseBasicParsing -TimeoutSec 2 -ErrorAction SilentlyContinue
        if ($response.StatusCode -eq 200) {
            $healthy = $true
        }
    } catch {
        Write-Host "." -NoNewline -ForegroundColor Gray
        Start-Sleep -Seconds 2
        $attempt++
    }
}

Write-Host ""

if ($healthy) {
    Write-Success "All services are ready!"
} else {
    Write-Info "Services starting (may take a bit longer)"
    Write-Host "  You can check status with: docker-compose logs -f" -ForegroundColor Gray
}

# ========================================
# Success!
# ========================================
Write-Host ""
Write-Host "================================================" -ForegroundColor Green
Write-Host "  ‚úì Multi-Model Chat is Ready!" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Green
Write-Host ""
Write-Host "Access your chat application:" -ForegroundColor Cyan
Write-Host "  üåê Frontend:  " -NoNewline; Write-Host "http://localhost:5173" -ForegroundColor White
Write-Host "  üìñ API Docs:  " -NoNewline; Write-Host "http://localhost:8000/api/v1/docs" -ForegroundColor White
Write-Host ""
Write-Host "Useful commands:" -ForegroundColor Cyan
Write-Host "  Stop:         " -NoNewline; Write-Host "docker-compose down" -ForegroundColor White
Write-Host "  View logs:    " -NoNewline; Write-Host "docker-compose logs -f" -ForegroundColor White
Write-Host "  Restart:      " -NoNewline; Write-Host "docker-compose restart" -ForegroundColor White
Write-Host ""

# Open browser
if (-not $SkipBrowser) {
    $openBrowser = Read-Host "Open in browser now? (Y/n)"
    if ($openBrowser -ne "n") {
        Start-Sleep -Seconds 2
        Start-Process "http://localhost:5173"
    }
}

Write-Host ""
Write-Host "Happy chatting! üöÄ" -ForegroundColor Cyan
Write-Host ""

